// <auto-generated />
using System;
using BankApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220501133032_SquashedMigrations")]
    partial class SquashedMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankApp.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TransferLimit")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankApp.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CA",
                            InterestRate = 0.5m,
                            Name = "Current Account"
                        },
                        new
                        {
                            Id = 2,
                            Code = "SA",
                            InterestRate = 3m,
                            Name = "Savings Account"
                        },
                        new
                        {
                            Id = 3,
                            Code = "FCA",
                            InterestRate = 0m,
                            Name = "Foreign Currency Account"
                        });
                });

            modelBuilder.Entity("BankApp.Entities.AccountTypeCurrency", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("AccountTypeId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AccountTypeCurrencies");

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            CurrencyId = 1
                        },
                        new
                        {
                            AccountTypeId = 2,
                            CurrencyId = 1
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 2
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 3
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 4
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 5
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 6
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 7
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 8
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 9
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 10
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 11
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 12
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 13
                        },
                        new
                        {
                            AccountTypeId = 3,
                            CurrencyId = 14
                        });
                });

            modelBuilder.Entity("BankApp.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BankApp.Entities.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CardTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TransactionLimit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("BankApp.Entities.CardOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CardOrders");
                });

            modelBuilder.Entity("BankApp.Entities.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("BankApp.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AI",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 6,
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 7,
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AN",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 10,
                            Code = "AQ",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 12,
                            Code = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 13,
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 14,
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 15,
                            Code = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 16,
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 18,
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 19,
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 20,
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 21,
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 22,
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 23,
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 24,
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 25,
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 26,
                            Code = "BM",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 27,
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 28,
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 29,
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 31,
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 32,
                            Code = "BV",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 33,
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 34,
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 35,
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 36,
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 37,
                            Code = "CC",
                            Name = "Cocos [Keeling] Islands"
                        },
                        new
                        {
                            Id = 38,
                            Code = "CD",
                            Name = "Congo [DRC]"
                        },
                        new
                        {
                            Id = 39,
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 40,
                            Code = "CG",
                            Name = "Congo [Republic]"
                        },
                        new
                        {
                            Id = 41,
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 42,
                            Code = "CI",
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 43,
                            Code = "CK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 44,
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 45,
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 46,
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 47,
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 48,
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 49,
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 50,
                            Code = "CV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 51,
                            Code = "CX",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 52,
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 53,
                            Code = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 54,
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 55,
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 56,
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 57,
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 58,
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 59,
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 60,
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 61,
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 62,
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 63,
                            Code = "EH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 64,
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 65,
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 66,
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 67,
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 68,
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 69,
                            Code = "FK",
                            Name = "Falkland Islands [Islas Malvinas]"
                        },
                        new
                        {
                            Id = 70,
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 71,
                            Code = "FO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 72,
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = 73,
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 74,
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 75,
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 76,
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 77,
                            Code = "GF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 78,
                            Code = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 79,
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 80,
                            Code = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 81,
                            Code = "GL",
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 82,
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 83,
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 84,
                            Code = "GP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 85,
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 86,
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 87,
                            Code = "GS",
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 88,
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 89,
                            Code = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 90,
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 91,
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 92,
                            Code = "GZ",
                            Name = "Gaza Strip"
                        },
                        new
                        {
                            Id = 93,
                            Code = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 94,
                            Code = "HM",
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Id = 95,
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 96,
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 97,
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 98,
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 99,
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 100,
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 101,
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 102,
                            Code = "IM",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 103,
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = 104,
                            Code = "IO",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 105,
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 106,
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 107,
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 108,
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 109,
                            Code = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 110,
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 111,
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 112,
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 113,
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 114,
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 115,
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 116,
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 117,
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 118,
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 119,
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = 120,
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 121,
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 122,
                            Code = "KY",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 123,
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 124,
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 125,
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 126,
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 128,
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 129,
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 130,
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 131,
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 132,
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 133,
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 134,
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 135,
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 136,
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 137,
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 138,
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 139,
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 140,
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 141,
                            Code = "MK",
                            Name = "Macedonia [FYROM]"
                        },
                        new
                        {
                            Id = 142,
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 143,
                            Code = "MM",
                            Name = "Myanmar [Burma]"
                        },
                        new
                        {
                            Id = 144,
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 145,
                            Code = "MO",
                            Name = "Macau"
                        },
                        new
                        {
                            Id = 146,
                            Code = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 147,
                            Code = "MQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 148,
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 149,
                            Code = "MS",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 150,
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 151,
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 152,
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 153,
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 154,
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 155,
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 156,
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 157,
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 158,
                            Code = "NC",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 159,
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 160,
                            Code = "NF",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 161,
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 162,
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 163,
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 164,
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 165,
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 166,
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 167,
                            Code = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 168,
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 169,
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 170,
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 171,
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 172,
                            Code = "PF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 173,
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 174,
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 175,
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 176,
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 177,
                            Code = "PM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 178,
                            Code = "PN",
                            Name = "Pitcairn Islands"
                        },
                        new
                        {
                            Id = 179,
                            Code = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 180,
                            Code = "PS",
                            Name = "Palestinian Territories"
                        },
                        new
                        {
                            Id = 181,
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 182,
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 183,
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 184,
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 185,
                            Code = "RE",
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = 186,
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 187,
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 188,
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 190,
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 191,
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 192,
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 193,
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 194,
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 195,
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 196,
                            Code = "SH",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 197,
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 198,
                            Code = "SJ",
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 199,
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 200,
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 201,
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 202,
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 203,
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 204,
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 205,
                            Code = "ST",
                            Name = "São Tomé and Príncipe"
                        },
                        new
                        {
                            Id = 206,
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 207,
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 208,
                            Code = "SZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 209,
                            Code = "TC",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Id = 210,
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 211,
                            Code = "TF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 212,
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 213,
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 214,
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 215,
                            Code = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 216,
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 217,
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 218,
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 219,
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 220,
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 221,
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 222,
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 223,
                            Code = "TW",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 224,
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 225,
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 226,
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 227,
                            Code = "UM",
                            Name = "U.S. Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 228,
                            Code = "US",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 229,
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 230,
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 231,
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = 232,
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 233,
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 234,
                            Code = "VG",
                            Name = "British Virgin Islands"
                        },
                        new
                        {
                            Id = 235,
                            Code = "VI",
                            Name = "U.S. Virgin Islands"
                        },
                        new
                        {
                            Id = 236,
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 237,
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 238,
                            Code = "WF",
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 239,
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 240,
                            Code = "XK",
                            Name = "Kosovo"
                        },
                        new
                        {
                            Id = 241,
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 242,
                            Code = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 243,
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 244,
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 245,
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("BankApp.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ask")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Bid")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "PLN"
                        },
                        new
                        {
                            Id = 2,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "USD"
                        },
                        new
                        {
                            Id = 3,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "AUD"
                        },
                        new
                        {
                            Id = 4,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "CAD"
                        },
                        new
                        {
                            Id = 5,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "EUR"
                        },
                        new
                        {
                            Id = 6,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "HUF"
                        },
                        new
                        {
                            Id = 7,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "CHF"
                        },
                        new
                        {
                            Id = 8,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "GBP"
                        },
                        new
                        {
                            Id = 9,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "JPY"
                        },
                        new
                        {
                            Id = 10,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "CZK"
                        },
                        new
                        {
                            Id = 11,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "DKK"
                        },
                        new
                        {
                            Id = 12,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "NOK"
                        },
                        new
                        {
                            Id = 13,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "SEK"
                        },
                        new
                        {
                            Id = 14,
                            Ask = 0m,
                            Bid = 0m,
                            Code = "XDR"
                        });
                });

            modelBuilder.Entity("BankApp.Entities.Transfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Executed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFailed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Ordered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReasonFailed")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SenderAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = "7a4165b4-0aca-43fb-a390-294781ee377f"
                        });
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7a4165b4-0aca-43fb-a390-294781ee377f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "685eb3b8-e5a1-43f9-8168-81dcfe494962",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHGX/3nlRuKCce4QDEUBx4CMoPrqeagCKXjpMMbOlQjluk7hJKjQahWqMTfwtfDZcQ==",
                            SecurityStamp = "271eca47-1e45-44de-8355-7aeba9e46649",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fa2640a0-0496-4010-bc27-424e0e5c6f78",
                            ConcurrencyStamp = "6a810648-1fc2-4696-93ca-df5a31b15c2c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "58c162fe-6871-4615-982a-738b416748e9",
                            ConcurrencyStamp = "4effe154-4700-44ad-9ed9-0d2e8ab2452c",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "bca4ec56-c05e-4747-a607-f3c0a8699b12",
                            ConcurrencyStamp = "d9c51bd1-8f8c-43c5-a150-440246eb5ff1",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7a4165b4-0aca-43fb-a390-294781ee377f",
                            RoleId = "fa2640a0-0496-4010-bc27-424e0e5c6f78"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("BankApp.Entities.Account", b =>
                {
                    b.HasOne("BankApp.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Entities.UserTypes.Customer", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("AccountType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("BankApp.Entities.AccountTypeCurrency", b =>
                {
                    b.HasOne("BankApp.Entities.AccountType", "AccountType")
                        .WithMany("AvailableCurrencies")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("BankApp.Entities.Address", b =>
                {
                    b.HasOne("BankApp.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Entities.UserTypes.Customer", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("BankApp.Entities.Address", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankApp.Entities.Card", b =>
                {
                    b.HasOne("BankApp.Entities.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("BankApp.Entities.CardOrder", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.Customer", null)
                        .WithMany("BankCardOrders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("BankApp.Entities.Transfer", b =>
                {
                    b.HasOne("BankApp.Entities.Account", "SenderAccount")
                        .WithMany("Transfers")
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Admin", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", "AppUser")
                        .WithOne()
                        .HasForeignKey("BankApp.Entities.UserTypes.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.AppUser", b =>
                {
                    b.OwnsMany("BankApp.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<string>("AppUserId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("text");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("AppUserId");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Customer", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", "AppUser")
                        .WithOne()
                        .HasForeignKey("BankApp.Entities.UserTypes.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Employee", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", "AppUser")
                        .WithOne()
                        .HasForeignKey("BankApp.Entities.UserTypes.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankApp.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BankApp.Entities.UserTypes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApp.Entities.Account", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("BankApp.Entities.AccountType", b =>
                {
                    b.Navigation("AvailableCurrencies");
                });

            modelBuilder.Entity("BankApp.Entities.UserTypes.Customer", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccounts");

                    b.Navigation("BankCardOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
